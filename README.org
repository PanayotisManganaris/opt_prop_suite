#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2021-12-18 Sat>
#+author: Panayotis Manganaris
#+email: panos@ASCALON
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.5)
#+cite_export:
* Overview
This project repository is hosted on Github for accessibility and
convenience.

This README also serves as a design document and as a log of
collaboration arrangements
* Installation for Developers
This Jupyter Notebook Simtool is intended for publication on
Nanohub.org where it will be user facing

User and Developer dependencies are stated in pyproject.toml
** Local Installation
To install and contribute to the development version on any system
simply clone the repository to a suitable working directory. Then,
either use your environment manager of choice to install poetry or let
poetry define its own virtual environment and then execute poetry
install in the repo root.

You should not need to use conda to install the C toolchain in this
case.

In this case, you cannot test run the simtool itself short of setting
up a slurm server yourself.
** Nanohub Installation
The simtool is designed to utilize nanohub's HPC resources in running
quantum espresso DFT simulation by submitting runs via python hublib's
slurm integration.

To use nanohub's https://nanohub.org/tools/jupyter development
environment, launch a terminal under the "new" menu in the jupyter
browser and navigate to a preferred working directory, Then create a
conda virtual environment. I call mine "ops" for opt_prop_suite.

Populate the environment with the c tool chain and python core
libraries. Then use pip to install poetry.

#+begin_src bash
  conda create --name ops -c conda-forge glib
  conda activate ops
  pip install poetry
#+end_src

Then, clone the repository to a suitable working directory in your
nanohub home.

Finally, use poetry to install the opt_prop_suite dependencies.

#+begin_src bash
  git clone https://github.com/PanayotisManganaris/opt_prop_suite.git
  poetry install
#+end_src

then launch compute_spectra_workflow.ipynb to use the simtool.
** Adding Dependencies
Packaging is the easiest way to make python development portable
because the environment can simply be committed with the rest of the
repository.

If in the course of development you require packages not defined in
the pyproject.toml you must install them using poetry. This will take
care of updating the configuration file and install the dependency.

#+begin_src bash
  poetry add <package_name>
#+end_src

Then commit the poetry.lock and pyproject.toml both back to the
repository to share the dependency with other developers.
* Tasks Division
** everyone
contribute runs to "successes and failures" presentation
- [ ] find a few runs that fail outright
  - log what you find here, for everything. put screenshots in Deliverables subdirectory
- [ ] find a few runs that return bad spectra
- [ ] find a few runs that run well
** Kat
*** Frontend Design
- [X] Structure Visualization
- [X] Widget Based User GUI
*** Frontend Presentation
- [ ] read only notebook?
- [ ] rappture toolkit
  supposedly works to auto-generate guis similarly to how
  simtool auto-generates databases?
** Panos
*** Standardize Development Environment
qgrid apparently is a big hassle to install on nanohub? user databrowser gui based on it

*** Obtain Results
500-700 sample structures chosen by Shivam
get cutoff frequency at the maximum of final peak (see optprop for optimizer)
*** Optimize Kpath meshing
for Raman Computation
- [ ] SeekPath vs pwtools?
*** INACTIVE Optimize Qpath meshing
for phonon dispersions
** Joji
*** Outline Analysis Simtool
- [ ] postprocessing section
  - [ ] peak-broadening script
* Authors
[2021-12-18 Sat]
co-authors: Kat Nykiel, Paul Tanmoy, Panos Manganaris, Shivam Tripathi, Saswat Mishra
senior author: Dr.Ale Strachan, Dr. Arun Kanakkithodi
acknowledgements: Yuxuan Zhang for initial IR spectra
[2022-01-19 Wed]
Joji
get DOS, phonon dispersion, optical spectra
* declaring in/out
** in
structures (matproj POSCARS, ciffs, etc)

critically, make sure any irregular inputs can be indexed when all is
said and done

** out
notice -- .wfc files and wfc.dat files should be removed

double critical: if an output is not recorded, the simtool will fail to hash

more outputs == more chances that work will need to be repeated

User Queries have to work on the outputs
- all indexable strucutre/chemistries
  - chemical
  - mpid
  - spacegroup
  - bandgap -- if we get it
  - energy
  - charge densities
- forces
- stress
- phonon dispersion
- raman/IR
  - IR cutoff
- fermi energy
- Bandgap
- eDoS
- UV cutoff
- absorption coefficient vs phonon
- SLME
- PV_FOM
* Minutia of Simulation Settings
** cell vs atomic relaxation
to enable study of strain effects on optical properties, we offer the
option to run the simulation pipline with OR without an initial VC-relaxation
*** conditional relaxation
"check" flag which can reassure user of "reasonable" structures.
*** alternatively:
always do atomic/force relax relaxation and let the user decide which 
** detailed breakdown of computational shortcomings
dft related issues presentation.
* User Instructions
** optical property calculation
** assessing results
** data management
