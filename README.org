#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:t todo:t |:t
#+title: README
#+date: <2021-12-18 Sat>
#+author: Panayotis Manganaris
#+email: panos@ASCALON
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.2 (Org mode 9.5)
#+cite_export:
* Overview
Nanohub based virtual lab for design, execution, and analysis of
computational experiments testing the optical properties of
semiconductors. Runs Quantum Espresso DFT code.

This README also serves as a design document and as a log of
collaboration arrangements
* Installation for Developers
This Jupyter Notebook Simtool is intended for publication on
Nanohub.org where it will be user facing.

It depends only on the packages included in nanoHUB's anaconda-6
standard python3 kernel. A reproducible list of these dependencies is
not included with this repository.

** Nanohub Installation
To contribute to the development of this Simtool. Simply clone the
repository to a suitable working directory *on your nanoHUB
filesystem*.

This can be done by navigating to https://nanohub.org/tools/jupyter

Launch the tool and start a terminal from the "new" dropdown to the
right of the jupyter filebrowser. Then run the git clone command.
Alternatively, use ssh.

Then launch the relevant notebooks. Be sure to commit any
changes. Create new branches for new features.

* Tasks Division
** shared
- [ ] simtool v0.8.0
  - discrete, linked simtools
  - focus on doing one job well
  - ensure robust hashing
** Kat
- [X] quantum espresso simulation input files
- [X] crystal visualization
- [X] interface widgets
- [-] huge amounts of troubleshooting
  - [-] calculation convergence
    - [X] SiO
    - [ ] ZnO -- weirdness
  - [X] settings testing
  - [ ] pseudopotentials
  - [ ] functionals
  - [ ] aaaaaaaaa
- [ ] phonon dispersion and electronic structure extraction
** Panos
- [X] simtool v0.0.01
- [X] simtool v0.1.50
- [X] installed 670raman tool
- [ ] gui
** Joji
- [X] spectrum smoothing for post processing
- [ ] phonon dispersion/DOS analysis
- [ ] optical spectra
* Authors
** original
[2021-12-18 Sat]
co-authors: Kat Nykiel, Paul Tanmoy, Panos Manganaris, Shivam
Tripathi, Saswat Mishra

senior author: Dr.Ale Strachan, Dr. Arun Mannodi-Kanakkithodi

acknowledgements: Yuxuan Zhang for initial IR spectra
** additional
[2022-01-19 Wed]

Joji

* declaring in/out
** Deterministic
- logging should be set to full resolution
  - all checks should be efficient or should be eliminated
- compute resources should be conservatively estimated from electron count
** in
- [ ] structure dictionary
  - [ ] credit pymatgen for the struct_dict
  - [ ] put it at the top
- [ ] define kpoint settings in terms of input density
  - [ ] update kpoint descriptions
- [ ] focus on crystals -- adjust epsil accordingly
  - [ ] epsil decides dielectric constant calculations?
  - [ ] decide and fix.
- [ ] pp needs to be a choice
  - [ ] restrict available pps according to the viability of the XC functional
  - [ ] select them all at once. set descriptions accordingly.

** TODO out
if an output is not recorded, the simtool will fail to hash.

so. to improve flexibility of simulation pipelines, outputs should be
hashed in stages. Outputs needed for the operation of another simtool
should be indexed individually.

notice -- .wfc files and wfc.dat files should be removed (diskio option)

*** relax_sim.ipynb
- [ ] calculation validation logic:
  - [ ] log validation as output ("calculation converged")
  - [ ] return nothing if failed
- [ ] Chemical Formula
- [ ] relaxed structure
  - [ ] space group
- [ ] stress tensor -- minimized here... computed elsewhere?
- [ ] atomic forces tensor

*** scf_sim.ipynb
- [ ] calculation validation logic:
  - [ ] log validation as output ("calculation converged")
  - [ ] return nothing if failed
- [ ] Chemical Formula
- [ ] band gap
- [ ] dielectric constant
- [ ] total energy
- [ ] fermi energy? -- dos here?
- [ ] spectra
  - [ ] eDOS -- ?
- [ ] charge density

*** ph_sim.ipynb
- [ ] calculation validation logic:
  - [ ] log validation as output ("calculation converged")
  - [ ] return nothing if failed
- [ ] Chemical Formula
- [ ] spectra
  - [ ] phonon dispersion -- Kat?
- [ ] IR cutoff
- [ ] UV cutoff

*** dynmat_sim.ipynb
- [ ] calculation validation logic:
  - [ ] log validation as output ("calculation converged")
  - [ ] return nothing if failed
- [ ] Chemical Formula
- [ ] spectra
  - [ ] IR
  - [ ] Raman
  - [ ] UV -- ?
- [ ] IR cutoff -- max peak
- [ ] UV cutoff -- max peak
**** test
- [ ] Si2
- [ ] GaN
- [ ] GaAr

*** post-processing
- [ ] SLME -- to be translated to cmcl
- [ ] PV_FOM -- to be translated to cmcl
- [ ] absorption coefficient vs phonon dispersion?
* User Instructions
** pipeline assembly
after selecting a structure, you are prompted to assemble a simulation
pipeline. This is a list of simulation steps that will be taken. At
each stage, the state of the submitted tool and the returned results
are hashed and entered into the nanoHUB database for future reference.

A pipeline consists of the following.
*** relaxation
a relaxation step is necessary

you have a choice between variable cell relaxation and atomic force
relaxation. The latter enables the study of strain effects on optical
properties.

One relaxation must be performed to ensure further results are
possible and physically meaningful.
**** cell vs atomic relaxation
Running an initial VCrelax will ensure minimal strain is present in
the crystal structure.

Atomic relaxation relaxes the atoms into an equilibrium position
without chafing the lattice constants. Thereby ensuring a physical
structure is obtained, but permitting it to be strained in some
way.
*** optical property calculation
** assessing results
*** calculation verification
the post processing notebook can offer a history of experiments from
materials project results to check that the simulation results
compares to known
*** validation
validation is left to the user
